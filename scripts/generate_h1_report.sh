#!/usr/bin/env bash
set -euo pipefail
ROOT=$(cd "$(dirname "$0")/.." && pwd)
RAW="$ROOT/out/raw"
REPORT="$ROOT/out/h1_report.md"

# Check for any CORS * hits
p0_hosts=$(jq -r '.host' "$RAW/cors.jsonl" | while read -r host; do
  jq -e --arg h "$host" '. | select(.host==$h) | .results[]? | select(.aco=="*")' "$RAW/cors.jsonl" > /dev/null 2>&1 && echo "$host"
done | sort -u)

if [[ -z "$p0_hosts" ]]; then
  echo "No wildcard CORS findings detected. Exiting." > "$REPORT"
  exit 0
fi

cat > "$REPORT" <<EOF
# HackerOne-ready Consolidated Report (draft)

Title: Access-Control-Allow-Origin set to "*" on accounts API endpoints — arbitrary origins can read account API JSON responses

Summary:
Multiple accounts API hosts respond with Access-Control-Allow-Origin: * on core API endpoints (/v1, /api, /graphql, /status, /health). This allows any website to issue requests from a victim’s browser and read responses. Because these endpoints are part of the accounts service, they may return sensitive account metadata or API schema — enabling data exfiltration and client-side token replay risks.

Affected hosts (from passive CI run):
$(echo "$p0_hosts" | sed 's/^/- /')

Proof-of-Concept (passive, safe):
1. From an attacker-controlled origin (e.g. http://evil.example), run:
\`\`\`html
<script>
  fetch('https://accounts.api.cx.metamask.io/v1')
    .then(r => r.text())
    .then(t => console.log(t));
</script>
\`\`\`
2. If console prints JSON, the response is readable due to wildcard CORS.

Attachments generated by CI:
- out/raw/cors.jsonl
- out/raw/discovered_apis.jsonl
- out/raw/tls.jsonl
- out/raw/sessions.jsonl
- out/evidence/har/*.har
- out/triage.txt

Remediation (exact):
1. Do not use * for Access-Control-Allow-Origin on any endpoints that return non-public data. Replace with strict allow-list.
2. If credentials are required (Access-Control-Allow-Credentials: true), never use * — echo the explicit origin only after strict validation.
3. Ensure Vary: Origin is set when dynamically echoing origin.
4. Harden dev/uat: remove seeded test accounts, debug endpoints, and ensure rate limiting.
5. Remove public OpenAPI/Swagger dumps or protect them behind auth.

EOF

echo "H1 draft written to $REPORT"
